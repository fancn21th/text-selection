测试1

公式

公式类

$$ 导数公式：(x^n)' = nx^(n-1)，(sin x)' = cos x $$

$$ 积分公式：∫x^n dx = 1/(n+1) * x^(n+1) + C $$

$$ 组合数公式：Cnm=n!/[(n−m)!∗m!] $$

代码块

编写一段excel文件转json的python代码：

要将Excel文件转换为JSON格式，你可以使用pandas库来读取Excel文件，并使用Python内置的json库来将数据转换为JSON字符串。以下是一个简单的示例代码，展示了如何实现这一转换：

首先，确保你已经安装了pandas和openpyxl（用于读取.xlsx文件）库。如果没有安装，可以使用pip来安装：

linux pip install pandas openpyxl

然后，你可以使用以下Python代码将Excel文件转换为JSON：

```python import pandas as pd import json

读取Excel文件

def read_excel_file(file_path): # 假设Excel文件只有一个工作表，并且你想读取第一个工作表 df = pd.read_excel(file_path, engine='openpyxl') return df

将DataFrame转换为JSON字符串

def df_to_json(df): # 转换为JSON字符串，orient参数控制输出的格式 # 'records' 表示每行一个字典，'index' 表示是否包含行索引 json_str = df.to_json(orient='records', index=False) return json_str

将JSON字符串写入文件

def write_json_file(json_str, file_path): with open(file_path, 'w', encoding='utf-8') as f: f.write(json_str)

主函数

def excel_to_json(excel_file_path, json_file_path): df = read_excel_file(excel_file_path) json_str = df_to_json(df) write_json_file(json_str, json_file_path)

使用示例

excel_file_path = 'path_to_your_excel_file.xlsx' # 替换为你的Excel文件路径 json_file_path = 'output.json' # 输出的JSON文件路径 excel_to_json(excel_file_path, json_file_path)

print(f"Excel file converted to JSON and saved as {json_file_path}") ```

在上面的代码中，read_excel_file函数使用pandas的read_excel方法读取Excel文件。df_to_json函数将DataFrame转换为JSON字符串。write_json_file函数将JSON字符串写入文件。最后，excel_to_json函数将这些步骤组合在一起，并提供了使用示例。

[!WARNING]

请注意，Excel文件可能包含多个工作表，你可能需要指定要读取的工作表名称。此外，如果Excel文件中的数据包含复杂的数据类型（如日期、时间、混合类型等），你可能需要在转换为JSON之前对数据进行一些预处理。

内置类型

以下部分描述了解释器中内置的标准类型。

主要内置类型有数字、序列、映射、类、实例和异常。

有些多项集类是可变的。 它们用于添加、移除或重排其成员的方法将原地执行，并不返回特定的项，绝对不会返回多项集实例自身而是返回 None。

有些操作受多种对象类型的支持；特别地，实际上所有对象都可以比较是否相等、检测逻辑值，以及转换为字符串（使用 repr() 函数或略有差异的 str() 函数）。 后一个函数是在对象由 print() 函数输出时被隐式地调用的。

逻辑值检测

任何对象都可以进行逻辑值的检测，以便在 if 或 while 作为条件或是作为下文所述布尔运算的操作数来使用。

在默认情况下，一个对象会被视为具有真值，除非其所属的类定义了在对象上调用时返回 False 的 __bool__() 方法或者返回零的 __len__() 方法。 [1] 以下基本完整地列出了具有假值的内置对象：

被定义为假值的常量: None 和 False

任何数值类型的零: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)

空的序列和多项集: '', (), [], {}, set(), range(0)

产生布尔值结果的运算和内置函数总是返回 0 或 False 作为假值，1 或 True 作为真值，除非另行说明。 （重要例外：布尔运算 or 和 and 总是返回其中一个操作数。）

布尔运算 --- and, or, not

这些属于布尔运算，按优先级升序排列:

运算 结果： 备注 x or y 如果 x 为真值，则 x ，否则 y (1) x and y if x is false, then x , else y (2) not x if x is false, then True , else False (3)

注释：

这是个短路运算符，因此只有在第一个参数为假值时才会对第二个参数求值。

这是个短路运算符，因此只有在第一个参数为真值时才会对第二个参数求值。

not 的优先级比非布尔运算符低，因此 not a == b 会被解读为 not (a == b) 而 a == not b 会引发语法错误。

比较运算

在 Python 中有八种比较运算符。 它们的优先级相同（比布尔运算的优先级高）。 比较运算可以任意串连；例如，x < y <= z 等价于 x < y and y <= z，前者的不同之处在于 y 只被求值一次（但在两种情况下当 x < y 结果为假值时 z 都不会被求值）。

此表格汇总了比较运算:

运算 含意 < 严格小于 <= 小于或等于 > 严格大于 >= 大于或等于 == 等于 != 不等于 is 对象标识 is not 否定的对象标识

除不同的数字类型外，不同类型的对象不能进行相等比较。== 运算符总有定义，但对于某些对象类型（例如，类对象），它等于 is 。其他 <、<=、> 和 >= 运算符仅在有意义的地方定义。例如，当参与比较的参数之一为复数时，它们会抛出 TypeError 异常。

具有不同标识的类的实例比较结果通常为不相等，除非类定义了 __eq__() 方法。

一个类的实例不能与相同类的其他实例或其他类型的对象进行排序，除非定义该类定义了足够多的方法，包括 __lt__(), __le__(), __gt__() 以及 __ge__() (而如果你想实现常规意义上的比较操作，通常只要有 __lt__() 和 __eq__() 就可以了)。

is 和 is not 运算符无法自定义；并且它们可以被应用于任意两个对象而不会引发异常。

还有两种具有相同语法优先级的运算 in 和 not in，它们被 iterable 或实现了 __contains__() 方法的类型所支持。

数字类型 --- int, float, complex

存在三种不同的数字类型: 整数, 浮点数 和 复数。 此外，布尔值属于整数的子类型。 整数具有无限的精度。 浮点数通常使用 C 中的 double 来实现；有关你的程序运行所在机器上浮点数的精度和内部表示法可在 sys.float_info 中查看。 复数包含实部和虚部，分别以一个浮点数表示。 要从一个复数 z 中提取这两个部分，可使用 z.real 和 z.imag。 （标准库包含附加的数字类型，如表示有理数的 fractions.Fraction 以及以用户定制精度表示浮点数的 decimal.Decimal。）

数字是由数字字面值或内置函数与运算符的结果来创建的。 不带修饰的整数字面值（包括十六进制、八进制和二进制数）会生成整数。 包含小数点或幂运算符的数字字面值会生成浮点数。 在数字字面值末尾加上 'j' 或 'J' 会生成虚数（实部为零的复数），你可以将其与整数或浮点数相加来得到具有实部和虚部的复数。

Python 完全支持混合运算：当一个二元算术运算符的操作数有不同数值类型时，"较窄"类型的操作数会拓宽到另一个操作数的类型，其中整数比浮点数窄，浮点数比复数窄。不同类型的数字之间的比较，同比较这些数字的精确值一样。[2]

构造函数 int()、 float() 和 complex() 可以用来构造特定类型的数字。

所有数字类型（复数除外）都支持下列运算（有关运算优先级，请参阅：运算符优先级）:

运算 结果： 备注 完整文档 x + y x 和 y 的和 x - y x 和 y 的差 x * y x 和 y 的乘积 x / y x 和 y 的商 x // y x 和 y 的商数 (1)(2) x % y x / y 的余数 (2) -x x 取反 +x x 不变 abs(x) x 的绝对值或大小 abs() int(x) 将 x 转换为整数 (3)(6) int() float(x) 将 x 转换为浮点数 (4)(6) float() complex(re, im) 一个带有实部 re 和虚部 im 的复数。 im 默认为0。 (6) complex() c.conjugate() 复数 c 的共轭 divmod(x, y) (x // y, x % y) (2) divmod() pow(x, y) x 的 y 次幂 (5) pow() x ** y x 的 y 次幂 (5)

注释：

也称为整数除法。 对于 int 类型的操作数，结果的类型为 int。 对于 float 类型的操作数，结果的类型为 float。 总的说来，结果是一个整数，但结果的类型不一定为 int。 结果总是向负无穷的方向舍入: 1//2 为0，(-1)//2 为 -1，1//(-2) 为 -1，(-1)//(-2) 为 0。

不可用于复数。 而应在适当条件下使用 abs() 转换为浮点数。

从 float 转换为 int 将会执行截断，丢弃掉小数部分。 请参阅 math.floor() 和 math.ceil() 函数了解替代的转换方式。

float 也接受字符串 "nan" 和附带可选前缀 "+" 或 "-" 的 "inf" 分别表示非数字 (NaN) 以及正或负无穷。

Python 将 pow(0, 0) 和 0 ** 0 定义为 1，这是编程语言的普遍做法。

接受的数字字面值包括数码 0 到 9 或任何等效的 Unicode 字符（具有 Nd 特征属性的代码点）。

请参阅 Unicode 标准 了解具有 Nd 特征属性的码位完整列表。

所有 numbers.Real 类型 (int 和 float) 还包括下列运算:

运算 结果： math.trunc(x) x 截断为 Integral round(x[, n\]) x 舍入到 n 位小数，半数值会舍入到偶数。 如果省略 n ，则默认为 0。 math.floor(x) <= x 的最大 Integral math.ceil(x) >= x 的最小 Integral

有关更多的数字运算请参阅 math 和 cmath 模块。

整数类型的按位运算

按位运算只对整数有意义。 计算按位运算的结果，就相当于使用无穷多个二进制符号位对二的补码执行操作。

二进制按位运算的优先级全都低于数字运算，但又高于比较运算；一元运算 ~ 具有与其他一元算术运算 (+ and -) 相同的优先级。

此表格是以优先级升序排序的按位运算列表:

运算 结果： 备注 x | y x 和 y 按位 或 (4) x ^ y x 和 y 按位 异或 (4) x & y x 和 y 按位 与 (4) x << n x 左移 n 位 (1)(2) x >> n x 右移 n 位 (1)(3) ~x x 逐位取反

注释：

负的移位数是非法的，会导致引发 ValueError。

左移 n 位等价于乘以 pow(2, n) 。

右移 n 位等价于除以 pow(2, n) ，作向下取整除法。

使用带有至少一个额外符号扩展位的有限个二进制补码表示（有效位宽度为 1 + max(x.bit_length(), y.bit_length()) 或以上）执行这些计算就足以获得相当于有无数个符号位时的同样结果。

整数类型的附加方法

int 类型实现了 numbers.Integral abstract base class。 此外，它还提供了其他几个方法:

int.bit_length()

返回以二进制表示一个整数所需要的位数，不包括符号位和前面的零:>>>>>> n = -37 >>> bin(n) '-0b100101' >>> n.bit_length() 6更准确地说，如果 x 非零，则 x.bit_length() 是使得 2**(k-1) <= abs(x) < 2**k 的唯一正整数 k。 同样地，当 abs(x) 小到足以具有正确的舍入对数时，则 k = 1 + int(log(abs(x), 2))。 如果 x 为零，则 x.bit_length() 返回 0。等价于:def bit_length(self): s = bin(self) # binary representation: bin(-37) --> '-0b100101' s = s.lstrip('-0b') # remove leading zeros and minus sign return len(s) # len('100101') --> 6Added in version 3.1.

int.bit_count()

返回整数的绝对值的二进制表示中 1 的个数。也被称为 population count。示例:>>>>>> n = 19 >>> bin(n) '0b10011' >>> n.bit_count() 3 >>> (-n).bit_count() 3等价于:def bit_count(self): return bin(self).count("1")Added in version 3.10.

int.to_bytes(length=1, byteorder='big', *, signed=False)

返回表示一个整数的字节数组。>>>>>> (1024).to_bytes(2, byteorder='big') b'\x04\x00' >>> (1024).to_bytes(10, byteorder='big') b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00' >>> (-1024).to_bytes(10, byteorder='big', signed=True) b'\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00' >>> x = 1000 >>> x.to_bytes((x.bit_length() + 7) // 8, byteorder='little') b'\xe8\x03'整数会使用 length 个字节来表示，默认为 1。 如果整数不能用给定的字节数来表示则会引发 OverflowError。byteorder 参数确定用于表示整数的字节顺序，默认为 "big"。 如果 byteorder 为 "big"，则最高位字节放在字节数组的开头。 如果 byteorder 为 "little"，则最高位字节放在字节数组的末尾。signed 参数确定是否使用二的补码来表示整数。 如果 signed 为 False 并且给出的是负整数，则会引发 OverflowError。 signed 的默认值为 False。默认值可用于方便地将整数转为一个单字节对象:>>>>>> (65).to_bytes() b'A'但是，当使用默认参数时，请不要试图转换大于 255 的值否则会引发 OverflowError。等价于:def to_bytes(n, length=1, byteorder='big', signed=False): if byteorder == 'little': order = range(length) elif byteorder == 'big': order = reversed(range(length)) else: raise ValueError("byteorder must be either 'little' or 'big'") return bytes((n >> i*8) & 0xff for i in order)Added in version 3.2.在 3.11 版本发生变更: 添加了 length 和 byteorder 的默认参数值。

classmethod int.from_bytes(bytes, byteorder='big', *, signed=False)

返回由给定字节数组所表示的整数。>>>>>> int.from_bytes(b'\x00\x10', byteorder='big') 16 >>> int.from_bytes(b'\x00\x10', byteorder='little') 4096 >>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=True) -1024 >>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=False) 64512 >>> int.from_bytes([255, 0, 0], byteorder='big') 16711680bytes 参数必须为一个 bytes-like object 或是生成字节的可迭代对象。byteorder 参数确定用于表示整数的字节顺序，默认为 "big"。 如果 byteorder 为 "big"，则最高位字节放在字节数组的开头。 如果 byteorder 为 "little"，则最高位字节放在字节数组的末尾。 要请求主机系统上的原生字节顺序，请使用 sys.byteorder 作为字节顺序值。signed 参数指明是否使用二的补码来表示整数。等价于:def from_bytes(bytes, byteorder='big', signed=False): if byteorder == 'little': little_ordered = list(bytes) elif byteorder == 'big': little_ordered = list(reversed(bytes)) else: raise ValueError("byteorder must be either 'little' or 'big'") n = sum(b << i*8 for i, b in enumerate(little_ordered)) if signed and little_ordered and (little_ordered[-1] & 0x80): n -= 1 << 8*len(little_ordered) return nAdded in version 3.2.在 3.11 版本发生变更: 添加了 byteorder 的默认参数值。

int.as_integer_ratio()

返回一对整数，其比率正好等于原整数并且分母为正数。 整数的比率总是用这个整数本身作为分子并以 1 作为分母。Added in version 3.8.

int.is_integer()

返回 True。 存在于兼容 float.is_integer() 的鸭子类型。Added in version 3.12.

浮点类型的附加方法

float 类型实现了 numbers.Real abstract base class。 float 还具有以下附加方法。

float.as_integer_ratio()

返回一对整数，其比率正好等于原浮点数。 该比率为最简形式且分母为正值。 无穷大会引发 OverflowError 而 NaN 则会引发 ValueError。

float.is_integer()

如果 float 实例可用有限位整数表示则返回 True，否则返回 False:>>>>>> (-2.0).is_integer() True >>> (3.2).is_integer() False

两个方法均支持与十六进制数字符串之间的转换。 由于 Python 浮点数在内部存储为二进制数，因此浮点数与 十进制数 字符串之间的转换往往会导致微小的舍入错误。 而十六进制数字符串却允许精确地表示和描述浮点数。 这在进行调试和数值工作时非常有用。

float.hex()

以十六进制字符串的形式返回一个浮点数表示。 对于有限浮点数，这种表示法将总是包含前导的 0x 和尾随的 p 加指数。

classmethod float.fromhex(s)

返回以十六进制字符串 s 表示的浮点数的类方法。 字符串 s 可以带有前导和尾随的空格。

请注意 float.hex() 是实例方法，而 float.fromhex() 是类方法。

十六进制字符串采用的形式为:

[sign] ['0x'] integer ['.' fraction] ['p' exponent]

可选的 sign 可以是 + 或 -，integer 和 fraction 是十六进制数码组成的字符串，exponent 是带有可选前导符的十进制整数。 大小写没有影响，在 integer 或 fraction 中必须至少有一个十六进制数码。 此语法类似于 C99 标准的 6.4.4.2 小节中所描述的语法，也是 Java 1.5 以上所使用的语法。 特别地，float.hex() 的输出可以用作 C 或 Java 代码中的十六进制浮点数字面值，而由 C 的 %a 格式字符或 Java 的 Double.toHexString 所生成的十六进制数字符串由为 float.fromhex() 所接受。

请注意 exponent 是十进制数而非十六进制数，它给出要与系数相乘的 2 的幂次。 例如，十六进制数字符串 0x3.a7p10 表示浮点数 (3 + 10./16 + 7./16**2) * 2.0**10 即 3740.0:

>>>

```

float.fromhex('0x3.a7p10') 3740.0 ```

对 3740.0 应用反向转换会得到另一个代表相同数值的十六进制数字符串:

>>>

```

float.hex(3740.0) '0x1.d380000000000p+11' ```

数字类型的哈希运算

对于可能为不同类型的数字 x 和 y，要求当 x == y 时必定有 hash(x) == hash(y) (详情参见 __hash__() 方法的文档)。 为了便于在各种数字类型 (包括 int, float, decimal.Decimal 和 fractions.Fraction) 上实现并保证效率，Python 对数字类型的哈希运算是基于为任意有理数定义统一的数学函数，因此该运算对 int 和 fractions.Fraction 的全部实例，以及 float 和 decimal.Decimal 的全部有限实例均可用。 从本质上说，此函数是通过以一个固定质数 P 进行 P 降模给出的。 P 的值在 Python 中可以 sys.hash_info 的 modulus 属性的形式被访问。

CPython 实现细节： 目前所用的质数设定，在 C long 为 32 位的机器上 P = 2**31 - 1 而在 C long 为 64 位的机器上 P = 2**61 - 1。

详细规则如下所述:

如果 x = m / n 是一个非负的有理数且 n 不可被 P 整除，则定义 hash(x) 为 m * invmod(n, P) % P，其中 invmod(n, P) 是对 n 模 P 取反。

如果 x = m / n 是一个非负的有理数且 n 可被 P 整除（但 m 不能）则 n 不能对 P 降模，以上规则不适用；在此情况下则定义 hash(x) 为常数值 sys.hash_info.inf。

如果 x = m / n 是一个负的有理数则定义 hash(x) 为 -hash(-x)。 如果结果哈希值为 -1 则将其替换为 -2。

特殊值 sys.hash_info.inf 和 -sys.hash_info.inf 分别用于正无穷或负无穷的哈希值。

对于一个 complex 值 z，会通过计算 hash(z.real) + sys.hash_info.imag * hash(z.imag) 将实部和虚部的哈希值结合起来，并进行降模 2**sys.hash_info.width 以使其处于 range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - 1)) 范围之内。 同样地，如果结果为 -1 则将其替换为 -2。

为了阐明上述规则，这里有一些等价于内置哈希算法的 Python 代码示例，可用于计算有理数、float 或 complex 的哈希值:

``` import sys, math

def hash_fraction(m, n): """Compute the hash of a rational number m / n.

Assumes m and n are integers, with n positive.
Equivalent to hash(fractions.Fraction(m, n)).

"""
P = sys.hash_info.modulus
# Remove common factors of P.  (Unnecessary if m and n already coprime.)
while m % P == n % P == 0:
    m, n = m // P, n // P

if n % P == 0:
    hash_value = sys.hash_info.inf
else:
    # Fermat's Little Theorem: pow(n, P-1, P) is 1, so
    # pow(n, P-2, P) gives the inverse of n modulo P.
    hash_value = (abs(m) % P) * pow(n, P - 2, P) % P
if m < 0:
    hash_value = -hash_value
if hash_value == -1:
    hash_value = -2
return hash_value

def hash_float(x): """Compute the hash of a float x."""

if math.isnan(x):
    return object.__hash__(x)
elif math.isinf(x):
    return sys.hash_info.inf if x > 0 else -sys.hash_info.inf
else:
    return hash_fraction(*x.as_integer_ratio())

def hash_complex(z): """Compute the hash of a complex number z."""

hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)
# do a signed reduction modulo 2**sys.hash_info.width
M = 2**(sys.hash_info.width - 1)
hash_value = (hash_value & (M - 1)) - (hash_value & M)
if hash_value == -1:
    hash_value = -2
return hash_value

```

布尔类型 - bool

代表真值的布尔对象。 bool 类型只有两个常量实例: True 和 False。

内置函数 bool() 可将任意值转换为布尔值，如果该值可以被解读为逻辑值的话（参见上面的 逻辑值检测 小节）。

对于逻辑运算，请使用 布尔运算符 and, or 和 not。 当于两个布尔值应用按位运算符 &, |, ^ 时，它们将返回一个等价于逻辑运算 "与", "或", "异或" 的布尔值。 但是，更推荐使用逻辑运算符 and, or 和 != 而不是 &, | 和 ^。

自 3.12 版本弃用: 按位取反运算符 ~ 已被弃用并将在 Python 3.14 中引发异常。

bool 是 int 的子类 (参见 数字类型 --- int, float, complex)。 在许多数字场景下，False 和 True 的行为分别与整数 0 和 1 类似。 但是，不建议这样使用；请使用 int() 显式地执行转换。

迭代器类型

Python 支持在容器中进行迭代的概念。 这是通过使用两个单独方法来实现的；它们被用于允许用户自定义类对迭代的支持。 将在下文中详细描述的序列总是支持迭代方法。

容器对象要提供 iterable 支持，必须定义一个方法:

container.iter()

返回一个 iterator 对象。 该对象需要支持下文所述的迭代器协议。 如果容器支持不同的迭代类型，则可以提供额外的方法来专门地请求不同迭代类型的迭代器。 （支持多种迭代形式的对象的例子有同时支持广度优先和深度优先遍历的树结果。） 此方法对应于 Python/C API 中 Python 对象类型结构体的 tp_iter 槽位。

迭代器对象自身需要支持以下两个方法，它们共同组成了 迭代器协议:

iterator.iter()

返回 iterator 对象本身。 这是同时允许容器和迭代器配合 for 和 in 语句使用所必须的。 此方法对应于 Python/C API 中 Python 对象类型结构体的 tp_iter 槽位。

iterator.next()

iterator 中返回下一项。 如果已经没有可返回的项，则会引发 StopIteration 异常。 此方法对应于 Python/C API 中 Python 对象类型结构体的 tp_iternext 槽位。

Python 定义了几种迭代器对象以支持对一般和特定序列类型、字典和其他更特别的形式进行迭代。 除了迭代器协议的实现，特定类型的其他性质对迭代操作来说都不重要。

一旦迭代器的 __next__() 方法引发了 StopIteration，它必须一直对后续调用引发同样的异常。 不遵循此行为特性的实现将无法正常使用。

生成器类型

Python 的 generator 提供了一种实现迭代器协议的便捷方式。 如果容器对象的 __iter__() 方法以生成器形式实现，它将自动返回一个迭代器对象（从技术上说是一个生成器对象），该对象提供 __iter__() 和 __next__() 方法。 有关生成器的更多信息可以参阅 yield 表达式的文档。

序列类型 --- list, tuple, range

有三种基本序列类型：list, tuple 和 range 对象。 为处理 二进制数据 和 文本字符串 而特别定制的附加序列类型会在专门的小节中描述。

通用序列操作

大多数序列类型，包括可变类型和不可变类型都支持下表中的操作。 collections.abc.Sequence ABC 被提供用来更容易地在自定义序列类型上正确地实现这些操作。

此表按优先级升序列出了序列操作。 在表格中，s 和 t 是具有相同类型的序列，n, i, j 和 k 是整数而 x 是任何满足 s 所规定的类型和值限制的任意对象。

in 和 not in 操作具有与比较操作相同的优先级。 + (拼接) 和 * (重复) 操作具有与对应数值运算相同的优先级。 [3]

运算 结果： 备注 x in s 如果 s 中的某项等于 x 则结果为 True ，否则为 False (1) x not in s 如果 s 中的某项等于 x 则结果为 False ，否则为 True (1) s + t s 与 t 相拼接 (6)(7) s * n 或 n * s 相当于 s 与自身进行 n 次拼接 (2)(7) s[i] s 的第 i 项，起始为 0 (3) s[i:j] s 从 i 到 j 的切片 (3)(4) s[i:j:k] s 从 i 到 j 步长为 k 的切片 (3)(5) len(s) s 的长度 min(s) s 的最小项 max(s) s 的最大项 s.index(x[, i[, j]]) x 在 s 中首次出现项的索引号（索引号在 i 或其后且在 j 之前） (8) s.count(x) x 在 s 中出现的总次数

相同类型的序列也支持比较。 特别地，tuple 和 list 的比较是通过比较对应元素的字典顺序。 这意味着想要比较结果相等，则每个元素比较结果都必须相等，并且两个序列长度必须相同。 （完整细节请参阅语言参考的 比较运算 部分。）

可变序列的正向和逆向迭代器使用一个索引来访问值。 即使底层序列被改变该索引也将持续向前（或向后）步进。 迭代器只有在遇到 IndexError 或 a StopIteration 时才会终结（或是当索引降至零以下）。

注释：

虽然 in 和 not in 操作在通常情况下仅被用于简单的成员检测，某些专门化序列 (例如 str, bytes 和 bytearray) 也使用它们进行子序列检测:

>>>

```

"gg" in "eggs" True ```

小于 0 的 n 值会被当作 0 来处理 (生成一个与 s 同类型的空序列)。 请注意序列 s 中的项并不会被拷贝；它们会被多次引用。 这一点经常会令 Python 编程新手感到困扰；例如:

>>>

```

lists = [[]] * 3 lists [[], [], []] lists[0].append(3) lists [[3], [3], [3]] ```

具体的原因在于 [[]] 是一个包含了一个空列表的单元素列表，所以 [[]] * 3 结果中的三个元素都是对这一个空列表的引用。 修改 lists 中的任何一个元素实际上都是对这一个空列表的修改。 你可以用以下方式创建以不同列表为元素的列表:

>>>

```

lists = [[] for i in range(3)] lists[0].append(3) lists[1].append(5) lists[2].append(7) lists [[3], [5], [7]] ```

进一步的解释可以在 FAQ 条目 如何创建多维列表？ 中查看。

如果 i 或 j 为负值，则索引顺序是相对于序列 s 的末尾: 索引号会被替换为 len(s) + i 或 len(s) + j。 但要注意 -0 仍然为 0。

s 从 i 到 j 的切片被定义为所有满足 i <= k < j 的索引号 k 的项组成的序列。 如果 i 或 j 大于 len(s)，则使用 len(s)。 如果 i 被省略或为 None，则使用 0。 如果 j 被省略或为 None，则使用 len(s)。 如果 i 大于等于 j，则切片为空。

s 从 i 到 j 步长为 k 的切片被定义为所有满足 0 <= n < (j-i)/k 的索引号 x = i + n*k 的项组成的序列。 换句话说，索引号为 i, i+k, i+2*k, i+3*k，以此类推，当达到 j 时停止 (但一定不包括 j)。 当 k 为正值时，i 和 j 会被减至不大于 len(s)。 当 k 为负值时，i 和 j 会被减至不大于 len(s) - 1。 如果 i 或 j 被省略或为 None，它们会成为“终止”值 (是哪一端的终止值则取决于 k 的符号)。 请注意，k 不可为零。 如果 k 为 None，则当作 1 处理。

拼接不可变序列总是会生成新的对象。 这意味着通过重复拼接来构建序列的运行时开销将会基于序列总长度的乘方。 想要获得线性的运行时开销，你必须改用下列替代方案之一：

如果拼接 str 对象，你可以构建一个列表并在最后使用 str.join() 或是写入一个 io.StringIO 实例并在结束时获取它的值

如果拼接 bytes 对象，你可以类似地使用 bytes.join() 或 io.BytesIO，或者你也可以使用 bytearray 对象进行原地拼接。 bytearray 对象是可变的，并且具有高效的重分配机制

如果拼接 tuple 对象，请改为扩展 list 类

对于其它类型，请查看相应的文档

某些序列类型 (例如 range) 仅支持遵循特定模式的项序列，因此并不支持序列拼接或重复。

当 x 在 s 中找不到时 index 会引发 ValueError。 不是所有实现都支持传入额外参数 i 和 j。 这两个参数允许高效地搜索序列的子序列。 传入这两个额外参数大致相当于使用 s[i:j].index(x)，但是不会复制任何数据，并且返回的索引是相对于序列的开头而非切片的开头。

不可变序列类型

不可变序列类型普遍实现而可变序列类型未实现的唯一操作就是对 hash() 内置函数的支持。

这种支持允许不可变类型，例如 tuple 实例被用作 dict 键，以及存储在 set 和 frozenset 实例中。

尝试对包含有不可哈希值的不可变序列进行哈希运算将会导致 TypeError。

可变序列类型

以下表格中的操作是在可变序列类型上定义的。 collections.abc.MutableSequence ABC 被提供用来更容易地在自定义序列类型上正确实现这些操作。

表格中的 s 是可变序列类型的实例，t 是任意可迭代对象，而 x 是符合对 s 所规定类型与值限制的任何对象 (例如，bytearray 仅接受满足 0 <= x <= 255 值限制的整数)。

运算 结果： 备注 s[i] = x 将 s 的第 i 项替换为 x s[i:j] = t 将 s 从 i 到 j 的切片替换为可迭代对象 t 的内容 del s[i:j] 等同于 s[i:j] = [] s[i:j:k] = t 将 s[i:j:k] 的元素替换为 t 的元素 (1) del s[i:j:k] 从列表中移除 s[i:j:k] 的元素 s.append(x) 将 x 添加到序列的末尾 (等同于 s[len(s):len(s)] = [x] ) s.clear() 从 s 中移除所有项 (等同于 del s[:] ) (5) s.copy() 创建 s 的浅拷贝 (等同于 s[:] ) (5) s.extend(t) 或 s += t 用 t 的内容扩展 s (基本上等同于 s[len(s):len(s)] = t ) s *= n 使用 s 的内容重复 n 次来对其进行更新 (6) s.insert(i, x) 在由 i 给出的索引位置将 x 插入 s (等同于 s[i:i] = [x] ) s.pop() 或 s.pop(i) 提取在 i 位置上的项，并将其从 s 中移除 (2) s.remove(x) 删除 s 中第一个 s[i] 等于 x 的项目。 (3) s.reverse() 就地将列表中的元素逆序。 (4)

注释：

t 必须与它所替换的切片具有相同的长度。

可选参数 i 默认为 -1，因此在默认情况下会移除并返回最后一项。

当在 s 中找不到 x 时 remove() 操作会引发 ValueError。

当反转大尺寸序列时 reverse() 方法会原地修改该序列以保证空间经济性。 为提醒用户此操作是通过间接影响进行的，它并不会返回反转后的序列。

包括 clear() 和 copy() 是为了与不支持切片操作的可变容器 (例如 dict 和 set) 的接口保持一致。 copy() 不是 collections.abc.MutableSequence ABC 的一部分，但大多数具体的可变序列类都提供了它。

Added in version 3.3: clear() 和 copy() 方法。

n 值为一个整数，或是一个实现了 __index__() 的对象。 n 值为零或负数将清空序列。 序列中的项不会被拷贝；它们会被多次引用，正如 通用序列操作 中有关 s * n 的说明。

printf 风格的字节串格式化

备注

此处介绍的格式化操作具有多种怪异特性，可能导致许多常见错误（例如无法正确显示元组和字典）。 如果要打印的值可能为元组或字典，请将其放入一个元组中。

字节串对象 (bytes/bytearray) 具有一种特殊的内置操作：使用 % (取模) 运算符。 这也被称为字节串的 格式化 或 插值 运算符。 对于 format % values (其中 format 为一个字节串对象)，在 format 中的 % 转换标记符将被替换为零个或多个 values 条目。 其效果类似于在 C 语言中使用 sprintf()。

如果 format 要求一个单独参数，则 values 可以为一个非元组对象。 [5] 否则的话，values 必须或是是一个包含项数与格式字节串对象中指定的转换符项数相同的元组，或者是一个单独的映射对象（例如元组）。

转换标记符包含两个或更多字符并具有以下组成，且必须遵循此处规定的顺序：

'%' 字符，用于标记转换符的起始。

映射键（可选），由加圆括号的字符序列组成 (例如 (somename))。

转换旗标（可选），用于影响某些转换类型的结果。

最小字段宽度（可选）。 如果指定为 '*' (星号)，则实际宽度会从 values 元组的下一元素中读取，要转换的对象则为最小字段宽度和可选的精度之后的元素。

精度（可选），以在 '.' (点号) 之后加精度值的形式给出。 如果指定为 '*' (星号)，则实际精度会从 values 元组的下一元素中读取，要转换的对象则为精度之后的元素。

长度修饰符（可选）。

转换类型。

当右边的参数为一个字典（或其他映射类型）时，字节串对象中的格式 必须 包含加圆括号的映射键，对应 '%' 字符之后字典中的每一项。 映射键将从映射中选取要格式化的值。 例如：

>>>

```

print(b'%(language)s has %(number)03d quote types.' % ... {b'language': b"Python", b"number": 2}) b'Python has 002 quote types.' ```

在此情况下格式中不能出现 * 标记符（因其需要一个序列类的参数列表）。

转换旗标为：

旗标 含意 '#' 值的转换将使用“替代形式”（具体定义见下文）。 '0' 转换将为数字值填充零字符。 '-' 转换值将靠左对齐（如果同时给出 '0' 转换，则会覆盖后者）。 ' ' (空格) 符号位转换产生的正数（或空字符串）前将留出一个空格。 '+' 符号字符 ( '+' 或 '-' ) 将显示于转换结果的开头（会覆盖 "空格" 旗标）。

可以给出长度修饰符 (h, l 或 L)，但会被忽略，因为对 Python 来说没有必要 -- 所以 %ld 等价于 %d。

转换类型为：

转换符 含意 备注 'd' 有符号十进制整数。 'i' 有符号十进制整数。 'o' 有符号八进制数。 (1) 'u' 过时类型 -- 等价于 'd' 。 (8) 'x' 有符号十六进制数（小写）。 (2) 'X' 有符号十六进制数（大写）。 (2) 'e' 浮点指数格式（小写）。 (3) 'E' 浮点指数格式（大写）。 (3) 'f' 浮点十进制格式。 (3) 'F' 浮点十进制格式。 (3) 'g' 浮点格式。 如果指数小于 -4 或不小于精度则使用小写指数格式，否则使用十进制格式。 (4) 'G' 浮点格式。 如果指数小于 -4 或不小于精度则使用大写指数格式，否则使用十进制格式。 (4) 'c' 单个字节（接受整数或单个字节对象）。 'b' 字节串（任何遵循 缓冲区协议 或是具有 __bytes__() 的对象）。 (5) 's' 's' 是 'b' 的一个别名，只应当在基于 Python2/3 的代码中使用。 (6) 'a' 字节串（使用 repr(obj).encode('ascii', 'backslashreplace') 来转换任意 Python 对象）。 (5) 'r' 'r' 是 'a' 的一个别名，只应当在基于 Python2/3 的代码中使用。 (7) '%' 不转换参数，在结果中输出一个 '%' 字符。

注释：

此替代形式会在第一个数码之前插入标示八进制数的前缀 ('0o')。

此替代形式会在第一个数码之前插入 '0x' 或 '0X' 前缀（取决于是使用 'x' 还是 'X' 格式）。

此替代形式总是会在结果中包含一个小数点，即使其后并没有数码。

小数点后的数码位数由精度决定，默认为 6。

此替代形式总是会在结果中包含一个小数点，末尾各位的零不会如其他情况下那样被移除。

小数点前后的有效数码位数由精度决定，默认为 6。

如果精度为 N，输出将截短为 N 个字符。

b'%s' 已弃用，但在 3.x 系列中将不会被移除。

b'%r' 已弃用，但在 3.x 系列中将不会被移除。

参见 PEP 237。

字典视图对象

由 dict.keys(), dict.values() 和 dict.items() 所返回的对象是 视图对象。 该对象提供字典条目的一个动态视图，这意味着当字典改变时，视图也会相应改变。

字典视图可以被迭代以产生与其对应的数据，并支持成员检测：

len(dictview)

返回字典中的条目数。

iter(dictview)

返回字典中的键、值或项（以 (键, 值) 为元素的元组表示）的迭代器。键和值是按插入时的顺序进行迭代的。 这样就允许使用 zip() 来创建 (值, 键) 对: pairs = zip(d.values(), d.keys())。 另一个创建相同列表的方式是 pairs = [(v, k) for (k, v) in d.items()].在添加或删除字典中的条目期间对视图进行迭代可能引发 RuntimeError 或者无法完全迭代所有条目。在 3.7 版本发生变更: 字典顺序会确保为插入顺序。

x in dictview

如果 x 是对应字典中存在的键、值或项（在最后一种情况下 x 应为一个 (键, 值) 元组） 则返回 True。

reversed(dictview)

返回一个逆序获取字典键、值或项的迭代器。 视图将按与插入时相反的顺序进行迭代。在 3.8 版本发生变更: 字典视图现在是可逆的。

dictview.mapping

返回 types.MappingProxyType 对象，封装了字典视图指向的原始字典。Added in version 3.10.

键视图与集合类似因为其条目是唯一的并且为 hashable。 条视图也有类似集合的操作因为 (键, 值) 对是唯一的并且键是可哈希的。 如果条目视图中的所有值也都是可哈希的，那么条目视图就可以与其他集合执行互操作。 （值视图不会被认为与集合类似因为条目通常不是唯一的）。 对于与集合类似的视图，可以使用为抽象基类 collections.abc.Set 定义的所有操作（例如，==, < 或 ^ 等）。 虽然使用了集合运算符，但与集合类似的视图接受任何可迭代对象作为其操作数，而不像集合那样只接受集合作为输入。

一个使用字典视图的示例:

```python

dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500} keys = dishes.keys() values = dishes.values()

iteration

n = 0 for val in values: ... n += val ... print(n) 504

keys and values are iterated over in the same order (insertion order)

list(keys) ['eggs', 'sausage', 'bacon', 'spam'] list(values) [2, 1, 1, 500]

view objects are dynamic and reflect dict changes

del dishes['eggs'] del dishes['sausage'] list(keys) ['bacon', 'spam']

set operations

keys & {'eggs', 'bacon', 'salad'} {'bacon'} keys ^ {'sausage', 'juice'} == {'juice', 'sausage', 'bacon', 'spam'} True keys | ['juice', 'juice', 'juice'] == {'bacon', 'spam', 'juice'} True

get back a read-only proxy for the original dictionary

values.mapping mappingproxy({'bacon': 1, 'spam': 500}) values.mapping['spam'] 500 ```

带图片

多模态更可信的专属AI

文生文、文生图、文生声音…支持多模态数据处理，让企业拥有更智能更可信的专属AI助理。

支持私域部署

可一键部署在您定义的，符合大模型运行的，任意算力资源之上。

更符合企业特性

支持多租户权限管理，轻松做到大型企业内部的能力共享及资源隔离。

轻松定制企业专属AI原生应用，开启企业智能化转型之旅！
